# Generated by Django 5.1.1 on 2024-09-22 13:47

import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.gis.db.models.fields
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='BuildingsPolygons',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
                ('osm_id', models.CharField(blank=True, max_length=80, null=True)),
                ('osm_way_id', models.CharField(blank=True, max_length=80, null=True)),
                ('building', models.CharField(blank=True, max_length=80, null=True)),
                ('name', models.CharField(blank=True, max_length=147, null=True)),
                ('amenity', models.CharField(blank=True, max_length=80, null=True)),
                ('office', models.CharField(blank=True, max_length=80, null=True)),
                ('shop', models.CharField(blank=True, max_length=80, null=True)),
            ],
            options={
                'db_table': 'CM_2018-09-19_WGS84_buildings_polygons_buildings',
            },
        ),
        migrations.CreateModel(
            name='ElectricityLines',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('geom', django.contrib.gis.db.models.fields.MultiLineStringField(srid=4326)),
                ('osm_id', models.CharField(blank=True, max_length=80, null=True)),
                ('power', models.CharField(blank=True, max_length=80, null=True)),
                ('cables', models.CharField(blank=True, max_length=80, null=True)),
                ('circuits', models.CharField(blank=True, max_length=80, null=True)),
                ('voltage', models.CharField(blank=True, max_length=80, null=True)),
                ('wires', models.CharField(blank=True, max_length=80, null=True)),
                ('location', models.CharField(blank=True, max_length=80, null=True)),
                ('division', models.CharField(blank=True, max_length=41, null=True)),
            ],
            options={
                'db_table': 'yde_CM_2018-09-19_WGS84_energy_electricity_lines_electricity-di',
            },
        ),
        migrations.CreateModel(
            name='Yaounde',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(srid=32633)),
                ('division', models.CharField(blank=True, max_length=41, null=True)),
            ],
            options={
                'db_table': 'Yaounde',
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('code', models.IntegerField(default=0)),
                ('profession', models.CharField(blank=True, max_length=150, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
